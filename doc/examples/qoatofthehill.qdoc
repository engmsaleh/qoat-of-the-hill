/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of this
** file.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \title QoatOfTheHill
    \example

    An example game deploying the GameEnabler framework. Classic "Scorched earth" / Worms clone with 2 human players who are trying to drop eachother from a randomly 
    generated mountain by shockwaves from their exploding ammunition. Everything is rendered with "real" OpenGL ES 2.0. 
    This application has been tested on Symbian^3 (Nokia N8, Nokia E7), Windows XP, and Windows with Qt 4.7.1 and PowerVR OpenGL 2.0 emulation libraries.

    
    \image qoatofthehill.png
 
    \section1 Important classes
    * CGameLevel: A class for the game level. Contains a generated 2D - version of the landscape and functionality/structures to generate a renderable 3D-mesh from it. 

    * CGameMenu: Very simple menu containing a title and two buttons. All of the texts are rendered as static images.

    * IGameObject: An interface for a dynamic object in the game. Contains information for position, moving direction, sprite index (texture) and lots of other information attached to a single object. Both of the players, ammunitions, trees, tooltip's etc. inherit from this.

    * CGameObjectManager: A class holding a list of objects inherited from IGameObject and methods to manipulate them. These objects will be runned / rendered.

    * CGamePlayer: A class inherited from IGameObject. Implements functionality for a single player. NOTE: GamePlayer.h / GamePlayer.cpp contains several small, separate classes which are all inherited from IGameObject and implement an object-specific functionality. For example, CGameTree, CGameBurningPiece, CGameAmmunition, etc. 

    * CParticleType: Defines a behaviour / attributes of a single particle. 

    * CParticleEngine: An engine running / rendering all of the particles.

    * CTextureManager: A helper class for loading/caching/automatic releasing of textures.

    * CGameInstance: Complete game instance encapsuling CGameLevel, 2 players, CParticleEngine, CGameObjectManager and other objects objects required. A pointer to this class is spreaded through the object interacting in the game. 

    * myGameWindow: The main game window derived from GameEnabler's GE::MainWindow. This is the "replacement QGLWidget" providing preinitialized OpenGL ES 2.0 for us.


    \section1 Build & Installation instructions

    Check that you have at least the latest Qt/Nokia Qt SDK installed in the development environment and on the device.
    The application can be compiled directly to any device with OpenGL ES 2.0 support. For example Maemo or Symbian^3. However, if you wish to compile it into some other platform, for example, desktop Windows, you need to have external OpenGL ES 2.0 emulation libraries. With Windows or Linux (32bit)desktop you can use Khronos OpenGL ES 2.0 PC-emulation libraries from www.imgtec.com (http://www.imgtec.com/powervr/insider/sdkdownloads/index.asp#GLES2) 
  
    1. Open the project file: 
       File -> Open File or Project, select qoatofthehill.pro 
  
    2. Select target(s), for example Desktop and Symbian^3, and press the Finish button. 
  
    3. Compile the project. If you are building for Desktop, modify your .pro-file's "windows" section's GLES2 include- and librarypaths according on where you have installed the SDK:
      "INCLUDEPATH += /PowerVRSDK/Builds/OGLES2/Include"
      "LIBS +=  -L/PowerVRSDK/Builds/OGLES2/WindowsPC/Lib"
    Must point to valid locations.
  
    4. You are now able to run the software. Have fun! 


*/
